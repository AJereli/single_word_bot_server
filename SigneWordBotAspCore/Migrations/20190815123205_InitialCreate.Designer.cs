// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SigneWordBotAspCore;

namespace SigneWordBotAspCore.Migrations
{
    [DbContext(typeof(SwDbContext))]
    [Migration("20190815123205_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SigneWordBotAspCore.BasketAccessEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(512);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("basket_access_enum");
                });

            modelBuilder.Entity("SigneWordBotAspCore.CredentialsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("BasketPassId")
                        .HasColumnName("basket_pass_id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(1024);

                    b.Property<string>("UnitPassword")
                        .IsRequired()
                        .HasColumnName("unit_password");

                    b.HasKey("Id");

                    b.HasIndex("BasketPassId");

                    b.HasIndex("Login")
                        .HasName("idx_credentials_login");

                    b.HasIndex("Name")
                        .HasName("idx_credentials_name");

                    b.ToTable("credentials");
                });

            modelBuilder.Entity("SigneWordBotAspCore.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Details")
                        .HasColumnName("details");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("note");
                });

            modelBuilder.Entity("SigneWordBotAspCore.PasswordsBasketModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BasketPass")
                        .HasColumnName("basket_pass")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("idx_passwords_basket_name");

                    b.ToTable("passwords_basket");
                });

            modelBuilder.Entity("SigneWordBotAspCore.UserBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessTypeId")
                        .HasColumnName("access_type_id");

                    b.Property<int>("BasketId")
                        .HasColumnName("basket_id");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AccessTypeId");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("user_basket");
                });

            modelBuilder.Entity("SigneWordBotAspCore.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(512);

                    b.Property<string>("SecondName")
                        .HasColumnName("second_name")
                        .HasMaxLength(256);

                    b.Property<long>("TgId")
                        .HasColumnName("tg_id")
                        .HasAnnotation("Npgsql:Comment", "Uniq telegram ID of the user");

                    b.Property<string>("TgUsername")
                        .HasColumnName("tg_username")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("idx_table");

                    b.HasIndex("TgId")
                        .IsUnique()
                        .HasName("idx_tg_id");

                    b.HasIndex("TgUsername")
                        .HasName("idx_tg_username");

                    b.ToTable("user");
                });

            modelBuilder.Entity("SigneWordBotAspCore.CredentialsModel", b =>
                {
                    b.HasOne("SigneWordBotAspCore.PasswordsBasketModel", "BasketModelPass")
                        .WithMany("Credentials")
                        .HasForeignKey("BasketPassId")
                        .HasConstraintName("fk_credentials_basket_pass");
                });

            modelBuilder.Entity("SigneWordBotAspCore.Note", b =>
                {
                    b.HasOne("SigneWordBotAspCore.UserModel", "UserModel")
                        .WithMany("Note")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_note_basket_access_enum");
                });

            modelBuilder.Entity("SigneWordBotAspCore.UserBasket", b =>
                {
                    b.HasOne("SigneWordBotAspCore.BasketAccessEnum", "AccessType")
                        .WithMany("UserBasket")
                        .HasForeignKey("AccessTypeId")
                        .HasConstraintName("fk_basket_access_enum");

                    b.HasOne("SigneWordBotAspCore.PasswordsBasketModel", "BasketModel")
                        .WithMany("UserBasket")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("fk_user_basket_credentials");

                    b.HasOne("SigneWordBotAspCore.UserModel", "UserModel")
                        .WithMany("UserBasket")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_basket_user");
                });
#pragma warning restore 612, 618
        }
    }
}
